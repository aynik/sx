#!/usr/bin/env node
var readline = require('readline');
var cluster = require('cluster');
var util = require('util');
var vm = require('vm');
var pack = require('../package');

var colors = {
    green: function(line){ return "\u001b[32m" + line + "\u001b[39m" },
    blue: function(line){ return "\u001b[34m" + line + "\u001b[39m" },
    red: function(line){ return "\u001b[31m" + line + "\u001b[39m" }
}

var rl = readline.createInterface(process.stdin, process.stdout, Function(), true);
var workers = parseInt(process.argv[2] || 1, 10) % 100;

if (cluster.isMaster) {
    while (workers--) cluster.fork();
    var workers = parseInt(process.argv[2] || 1, 10) % 100;
    cluster.workers.send = function(message){
        var that = this;
        Object.keys(this).map(function(id){ 
            if (id == +id) that[id].send(message);
        });
    };
    cluster.workers.on = function(type, next){
        var that = this;
        Object.keys(this).map(function(id){ 
            if (id == +id) that[id].on(type, function(args){
                next.apply(0, args.concat(id));
            });
        });
    };
    var answered = 0;
    cluster.workers.on('message', function(err, result, worker){
        answered = (answered + 1) % workers;
        if (err !== "Unexpected end of input"){
            if (err || result !== 'undefined'){
                var prefix = workers > 1 ? '// ' + worker + ': ' : '// ';
                if (err) console.log(colors.red(prefix + 'Error: ' + err));
                else console.log(result.split('\n').map(function(line){
                    return colors.green(prefix + line);
                }).join('\n'));
            }
            rl.buffer = [];
        }
        if (!answered) process.stdout.write(rl._prompt);
    });
    rl.buffer = [];
    rl._prompt = colors.blue('> ');
    rl._promptLength = 2;
    rl._promptIndent = 0;
    rl._ttyWrite = (function(){
        var sure = false;
        return function(s, key){
            key = key ||Â {};
            if (key.ctrl && ['c','d'].indexOf(key.name) > -1){
                if (sure) process.exit(0);
                else sure = true;
                var k = key.name.toUpperCase();
                console.log('\n'+colors.red('Sure? Press CTRL+'+k+' again to exit...'));
            } else {
                sure = false;
                rl.__proto__._ttyWrite.apply(this, arguments);
            }
        }
    }());
    rl.on('line', function(line){
        rl.buffer.push(line);
        cluster.workers.send(rl.buffer.join('\n'));
        if (line.match(/{/) && !line.match(/}/)) rl._promptIndent++;
        else if (line.match(/}/) && !line.match(/{/)) rl._promptIndent--;
        rl._prompt = (new Array(rl._promptIndent+1)).join('....').replace(/\.$/, ' ') || colors.blue('> ');
        rl._promptLength = rl._promptIndent ? rl._prompt.length : 2;
    });
    console.log(colors.blue("isx v" + pack.version));
    process.stdout.write(rl._prompt);
} else {  
    global.cluster = cluster;
    process.on('message', function(code){
        try { 
            var result = vm.runInThisContext(code); 
            process.send([null, util.inspect(result)]) 
        } catch (err) { 
            process.send([err.message, null]) 
        }
    });
}
