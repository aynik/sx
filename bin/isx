#!/usr/bin/env node
var fs = require('fs');
var vm = require('vm');
var path = require('path');
var util = require('util');
var repl = require("repl");
var jsjs = require('node-jsjs');
var colors = require('colors');
var cluster = require('cluster');
var pack = require('../package');

function pad(u, l, s, t){
    return s || (s = " "), (l -= u.length) > 0 ? (s = new Array(Math.ceil(l / s.length)
        + 1).join(s)).substr(0, t = !t ? l : t == 1 ? 0 : Math.ceil(l / 2))
        + u + s.substr(0, l - t) : u;
}

if (cluster.isMaster) {
    var session = process.argv[2] || ".session.js";
    var buffer = [];
    var state = {mode:'test'};
    var worker = cluster.fork();
    worker.setMaxListeners(9999);

    function write(result){
        return colors.green('// ' + util.inspect(result));
    }

    function load(fname, callback){
        fs.readFile(fname, 'utf-8', function(err, data){
            if (err) {
                if (!(err.message.match(/^ENOENT/) && fname === '.session.js')){
                    console.log(colors.red('Error: ' + err));
                }
            } else {
                var paths = [];
                var dirparts = path.dirname(fname).split('/');
                while (dirparts.length) {
                    paths.unshift(dirparts.join('/') + '/node_modules');
                    dirparts.pop();
                }
                worker.send('module.paths='+JSON.stringify(paths));
                worker.send('process.chdir("'+path.dirname(fname)+'")');
                worker.send(data);
                console.log(colors.green('// loaded: '+fname));
                buffer = data.split('\n');
            }
            console.log(colors.green('// mode: '+state.mode));
            callback(null);
        });
    }

    console.log(colors.green('// isx v'+pack.version));
    console.log(colors.green('// session: '+session));
    load(session, Function());

    repl.start({
        prompt: "",
        ignoreUndefined: true,
        input: process.stdin,
        output: process.stdout,
        writer: write,
        eval: function reval(cmd, context, filename, callback){
            var result, command = cmd.substr(1, cmd.length-3);
            if (command.match(/^:/)) {
                var parts = command.substr(1, command.length).split(' ');
                switch (parts[0]) {
                case 'load': case 'l':
                    worker.kill();
                    worker = cluster.fork();
                    worker.setMaxListeners(9999);
                    var fname = parts[1] || session;    
                    session = fname;
                    load(fname, callback); 
                    break;
                case 'reload': case 'r':
                    console.log(colors.green('// reloading...'));
                    return reval('(:l '+session+'\n)', context, filename, callback);
                    break; 
                case 'test': case 't': 
                    state.mode = 'test';
                    console.log(colors.green('// mode: '+state.mode));
                    callback(null);
                    break;
                case 'build': case 'b': 
                    state.mode = 'build';
                    console.log(colors.green('// mode: '+state.mode));
                    callback(null);
                    break;
                case 'write': case 'w':
                    var pretty = jsjs.read({dialect:'js',tab:4}, buffer.join('\n'));
                    fs.writeFile(session, pretty, function(err){
                        if (err) console.log(colors.red('Error: ' + err));
                        console.log(colors.green('// written: '+session));
                    });
                    break;
                case 'drop': case 'd':
                    var range = parts[1].split('-'), 
                        range0 = parseInt(range[0]||1, 10),
                        range1 = parseInt(range[1]||buffer.length-range0, 10);
                    var from = range.length > 1 ? range0 : buffer.length - (buffer.length - range0);
                    var len = range.length > 1 ? range1 - from : (buffer.length + 1) - from;
                    console.log(colors.green('// dropping lines: '+from+'-'+(from+len)));
                    console.log(colors.grey(buffer.splice(from-1, len).map(function(line, n){
                        var num = pad(String(from + n + 1), String(buffer.length).length);
                        return num+': '+line; 
                    }).join('\n')));    
                    break;
                case 'move': case 'm':
                    var range = parts[1].split('-'), 
                        range0 = parseInt(range[0]||1, 10),
                        range1 = parseInt(range[1]||buffer.length-range0, 10);
                    var dest = parseInt(parts[2]||buffer.length, 10);
                    var from = range.length > 1 ? range0 : buffer.length - (buffer.length - range0);
                    var len = range.length > 1 ? range1 - from : (buffer.length + 1) - from;
                    console.log(colors.green('// moving lines: '+from+'-'+(from+len)+' to line '+dest));
                    var old = buffer.slice();
                    var slice = buffer.splice(from-1, len);
                    buffer.splice.apply(buffer, [dest, 0].concat(slice));
                    try {
                        jsjs.read({dialect:'js',tab:4}, buffer.join('\n'));
                    } catch (err) {
                        console.log(colors.red('Error: Invalid Code Movement'));
                        buffer = old;
                    }
                    break;
                case 'print': case 'p':
                    if (!buffer.length) return callback(null);
                    var pretty = jsjs.read({dialect:'js',tab:4}, buffer.join('\n'));
                    console.log(colors.green(pretty.split('\n').map(function(line, n){
                        var num = pad(String(n + 1), String(buffer.length).length);
                        return '// ' + num+': '+line; 
                    }).join('\n')));
                    buffer = pretty.split('\n');
                    callback(null);
                    break;
                case 'quit': case 'q':
                    console.log(colors.green('// quitting...'));
                    process.exit(0);
                    break;
                }
            } else {
                worker.send(command);
                if (state.mode === "build") buffer = buffer.concat(command.split('\n'));
                worker.once('message', function(result){
                    callback(null, result==='undefined'?undefined:result); 
                });
            }
        }
    }); 
} else {
    var Module = require('module');
    var lmodule = new Module('repl', module);
    var lrequire = lmodule.require.bind(lmodule);
    var sandbox = {};
    for (var key in global) sandbox[key] = global[key];
    sandbox.module = lmodule;
    sandbox.require = lrequire;
    var context = vm.createContext(sandbox);
    var buffer = [];
    process.on('message', function(script) {
        try { 
            var result = vm.runInContext(buffer.concat(script).join('\n'), context);
            process.send(result||'undefined'); 
            buffer = [];
        } catch (err) {
            if (err.name === "SyntaxError" && err.message === "Unexpected end of input"){
                buffer.push(script);
            } else {
                console.log(colors.red('Error: ' + err));
                process.send('undefined');
                buffer = [];
            }
        }
    });
}
